Opal-0.5 (November 2019)
-----------
1. Partial launches support. You can split a launch in multiple steps.  With this feature you can now perform very high angular density sampling, that is, use very low angular separation and scan the sphere by zones: 
You can launch only for a given solid angle, with the angular separation you decide. Results are correctly filtered with thrust on the GPU and carried over additional launches until the launch is finished. This is useful mainly for electromagnetic characterization, where you need very accurate results. An example of  use is provided 
in the tunnel test. 

2. Fast math can be disabled. Again, when doing electromagnetic characterization, accurate results require disabling the fast_math option of the NVRTC compiler, to avoid approximations for cos, sin and other math functions. 

3. Memory management has been simplified. Only a global buffer and an atomic buffer is used for all the configurations, including multi-GPU. A large buffer is used to hold all the hits, independently of other scene parameters, 
such as the number of receivers receivers. Buffers are not resized during the simulation.  All together should improve the performance. 

4. Depolarization has been thoroughly tested and validated. In our tests, full depolarization does not impact appreciably the performance and should be the preferred method.

5. Fixed a bug in the filtering algorith, where the operator== was not implemented correctly. 
The filtering algorithm has been separated from the transfer to the host device, to facilitate partial launches. In addition, a memory management procedure to handle 
very large results (due to low AS and partial launches) has been added to the filtering code. 


6. Tests have been moved to a separate folder and better organized.  


Opal-0.4 (June 2019)
-----------
1. Depolarization added. Now, you can use arbitrary and different linear polarizations for transmitters and receivers. It also allows to simulate leaning (non horizontal or vertical) walls. It also has a performance cost, 
so it can be enabled or disabled. Polarization programas are in their own folder.

2. Multiple GPU support. Multiple GPUs can be used seamlessly with Optix. However, our implementation of the filtering duplicates algorithms requires a global buffer. We have added and implementation for 
multiple GPUs where each local GPU buffer is merged and filtered with thrust. 

3. Add a different different payload type. Now we have the HVWavePayload for the default mode with vertical or horizontal polarization and a LPWavePayload for arbitrary linear polarizations. In both cases, 
the fields have been packed as suggested in the documentation to improve the performance.  



Opal-0.3 (April 2019) 
-----------
1. Penetration added. Now rays can penetrate environment elements. Penetration uses recursive tracing and incurs in a performance penalty, so it 
can be enabled or disabled. A transmission coefficient plus an independent material attenuation are aplied to the rays. 
  - MaterialEMProperties has been updated to support attenuation.

2. Merged single and multitransmitter launches. Now all launches are 3D, with the z dimension used for the number of transmitters. A single 
transmitter sets z=1 (as used in OMNET). Code is cleaner and it should also improve performance (see https://devtalk.nvidia.com/default/topic/1048952/optix/recompile-question/ about setting variables vs buffer).
 - Removed all single/multi* .cu files, since we do not distinguish any more.
 - HitInfo now includes the transmitter buffer index and is sorted according to the transmitter

 3. Changed callable programs to device functions. According to https://devtalk.nvidia.com/default/topic/1048990/optix/question-about-function-vs-callable-programs/ 
 callable programs are necessary if we need virtual function like functionality, which we don't at the moment. Complex arithmetic has been put in its own Complex.h

 4. Tests have been moved along with main() to a tests.cpp file.



Opal-0.2 (March 2019)
-----------
1. Multi-transmitter: you can now launch with multiple transmitters in parallel. They are supposed to transmit simultaneously. No interference is computed, the receivers get the power received by each transmitter separately.  
To use it, a new class has been derived from the Opal class, since 
this feature is not compatible with OMNET++  at the moment. 
